\#define ${pid.upper()}_PACKED_SIZE_MIN $defineMIN()
	
\#define ${pid.upper()}_PACKED_SIZE_MAX $defineMAX()

${type} {
#for $e in $entries
#if 'repeated' in $e
	unsigned int ${e.id}_nb;
	${e.type} *${e.id};
#else
	${e.type} ${e.id};
#end if
#end for
};

/**
 * Check if input is valid ${type}
 *
 * @param[in] val The value to test
 *
 * @return an errno like error code
 * @retval 0       Success
 * @retval -EINVAL Invalid value
 */
int ${deprecated}
${check}(${type} * value);

/**
 * Decode a ${type} encoded according to the MessagePack format
 *
 * @param[inout] decoder decoder
 * @param[out]   value   location where to store decoded value
 *
 * @return an errno like error code
 * @retval 0         Success
 * @retval -EPROTO   Not a valid MessagePack stream
 * @retval -ENOTSUP  Unsupported MessagePack stream data
 * @retval -ENOMSG   Invalid MessagePack stream data type or range
 * @retval -EMSGSIZE Not enough space to complete operation
 * @retval -ENOMEM   Memory allocation failure
 *
 * @warning
 * - @p decoder *MUST* have been initialized using dpack_decoder_init_buffer()
 *   or dpack_decoder_init_skip_buffer() before calling this function. Result is
 *   undefined otherwise.
 * - When compiled with the #CONFIG_DPACK_ASSERT_API build option disabled and
 *   @p decoder is in error state before calling this function, result is
 *   undefined. An assertion is triggered otherwise.
 *
 * @see
 * - dpack_decoder_init_buffer()
 * - dpack_decoder_init_skip_buffer()
 */
int
${decode}(struct dpack_decoder * decoder,
	  ${type} * __restrict value)
__dpack_nonull(1, 2) __dpack_nothrow __warn_result ${deprecated};

/**
 * Encode an ${type} according to the MessagePack format
 * @param[inout] encoder encoder
 * @param[in]    value  ${pid} value to encode
 *
 * @return an errno like error code
 * @retval 0         Success
 * @retval -EMSGSIZE Not enough space to complete operation
 * @retval -ENOMEM   Memory allocation failure
 *
 * @warning
 * - @p encoder *MUST* have been initialized using dpack_encoder_init_buffer()
 *   before calling this function. Result is undefined otherwise.
 * - When compiled with the #CONFIG_DPACK_ASSERT_API build option disabled and
 *   @p encoder is in error state before calling this function, result is
 *   undefined. An assertion is triggered otherwise.
 *
 * @see
 * - dpack_encode_int8()
 * - dpack_encoder_init_buffer()
 */
int ${encode}(struct dpack_encoder * encoder,
	  ${type} * value)
__dpack_nonull(1) __dpack_nothrow __warn_result ${deprecated};

int ${init}(${type} * value);

void ${fini}(${type} * value);

## ex: filetype=c
