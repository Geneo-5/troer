.. SPDX-License-Identifier: LGPL-3.0-only

   This file is part of ${lib.name}.
   This file is generated by troer, don't edit manually.

.. _breathe:              https://github.com/breathe-doc/breathe
.. _stroll:               https://github.com/grgbr/stroll/
.. _ebuild:               https://github.com/grgbr/ebuild/
.. _pcre2:                https://github.com/PCRE2Project/pcre2
.. _jsonc:                https://github.com/json-c/json-c
.. _dpack:                https://github.com/grgbr/dpack/
.. |Stroll|               replace:: :external+stroll:doc:`Stroll <index>`
.. |Stroll's API guide|   replace:: :external+stroll:doc:`Stroll's API guide <api>`
.. |Dpack|                replace:: :external+dpack:doc:`Dpack <index>`
.. |Dapck's API guide|    replace:: :external+dpack:doc:`Dpack's API guide <api>`
.. |MessagePack format|   replace:: :external+dpack:doc:`MessagePack format <msgpack>`
.. |Json-c|               replace:: `Json-c <jsonc_>`_
.. |Pcre2|                replace:: `Pcre2 <pcre2_>`_
.. |eBuild|               replace:: `eBuild <ebuild_>`_
.. |eBuild User Guide|    replace:: :external+ebuild:doc:`eBuild User Guide <user>`
.. |eBuild Prerequisites| replace:: :external+ebuild:ref:`eBuild Prerequisites <sect-user-prerequisites>`

Overview
========

This guide mainly focuses upon the construction process required to install
${lib.name.title()}.

${lib.name.title()}'s build logic is is based upon |eBuild|. In addition to the
build process description explained below, you may refer to the
|eBuild User Guide| for further detailed informations.

In addition to the standard |eBuild Prerequisites|, ${lib.name.title()} requires
a working #slurp
#if 'json' in $pkgconfig
Jsonc_, #slurp
#end if
#if 'pcre' in $pkgconfig
Pcre2_, #slurp
#end if
Dpack_ and Stroll_ install at build time and runtime.

Optionally, you will need multiple packages installed to build the
documentation_. In addition to packages listed into |eBuild Prerequisites|,
${lib.name.title()}'s documentation_ generation process requires breathe_.

Getting help
============

From ${lib.name.title()} source tree root, enter:

.. code-block:: console

   $ make help

Also note that a more detailed help message is available:

.. code-block:: console

   $ make help-full

Refer to :external+ebuild:ref:`eBuild help target <target-help>` and
:external+ebuild:ref:`eBuild help-full target <target-help-full>` for further
informations.

The :external+ebuild:ref:`eBuild Troubleshooting <sect-user-troubleshooting>`
section also contains valuable informations.

Build Workflow
==============

As mentioned earlier, ${lib.name.title()}'s build logic is based on |eBuild|, a
|GNU make| based build system. To build and install ${lib.name.title()}, the
typical workflow is:

#. Prepare and collect workflow requirements,
#. |Build| programs, libraries, etc.,
#. |Install| components, copying files previously built to
   system-wide directories

Alternatively, you may replace the last step mentioned above with a |Staged
Install|. You will find below a **quick starting guide** showing how to build
${lib.name.title()} .

You are also provided with the ability to :

* generate documentation_

Preparation phase
-----------------

The overall :external+ebuild:ref:`eBuild Workflow <sect-user-workflow>` is
customizable thanks to multiple :command:`make` variable settings. You should
adjust values according to your specific needs.

Most of the time, setting |BUILDDIR|, |PREFIX|, |CROSS_COMPILE| is enough.
You should also set the :envvar:`PATH` environment variable according to the
set of tools required by the build process.

Optionally, you may set ``EXTRA_CFLAGS`` and ``EXTRA_LDFLAGS`` variables to
give the compiler and linker additional flags respectively.

Add ``-DCONFIG_${lib.id.upper()}_ASSERT`` in ``EXTRA_CFLAGS`` to enable 
:ref:`assertion <assertions>` configuration.

Refer to :external+ebuild:ref:`eBuild Tools <sect-user-tools>` and
:external+ebuild:ref:`eBuild Variables <sect-user-variables>` for further
informations.

.. _workflow-build-phase:

Build phase
-----------

Now, proceed to the |Build| phase and compile / link programs, libraries, etc.
by running the :external+ebuild:ref:`eBuild build target <target-build>`:

.. code-block:: console

   $ make build BUILDDIR=\$HOME/build/${lib.id} PREFIX=/usr
## ex: filetype=rst
