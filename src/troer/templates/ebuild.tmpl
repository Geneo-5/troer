## Setup Cheetah compiler placeholder delimiter to '@' instead of the default
## '$' to prevent from conflicting with makefile syntax.
#compiler-settings
cheetahVarStartToken = @
commentStartToken = @@@@
directiveStartToken = @@
directiveEndToken = @@
EOLSlurpToken = @@
multilineCommentStartToken = @@*
multilineCommentEndToken = *@@
#end compiler-settings
@@@@ Lines up to (and including) this one will get discarded from final output.
################################################################################
# SPDX-License-Identifier: LGPL-3.0-only
#
# This file is part of @{lib.name}.
# This file is generated by troer, don't edit manually.
################################################################################

@@if @builtin
builtins             = builtin.a
builtin.a-cflags     = $(EXTRA_CFLAGS)
builtin.a-obj        = @{lib.name}.o
@@else

config-in   := Config.in
config-h    := $(PACKAGE)/config.h

# Enable a bunch of warning options and disable -ffinite-math-only optimizations
# so that floating point number classification macros such as isnan() works
# properly (since NaN and Infinity values are tested).
common-cflags         := -Wall \
                         -Wextra \
                         -Wformat=2 \
                         -Wconversion \
                         -Wundef \
                         -Wshadow \
                         -Wcast-qual \
                         -Wcast-align \
                         -Wmissing-declarations \
                         -D_GNU_SOURCE \
                         -I $(TOPDIR)/include \
                         $(filter-out -ffinite-math-only,$(EXTRA_CFLAGS)) \
                         -fno-finite-math-only \
                         -fvisibility=hidden \
                         -Werror
common-ldflags        := $(common-cflags) \
                         $(EXTRA_LDFLAGS) \
                         -Wl,-z,start-stop-visibility=hidden

@@if @shared
solibs := lib@{lib.id}.so
lib@{lib.id}.so-objs       = shared/@{lib.name}.o
lib@{lib.id}.so-cflags     = $(filter-out -fpie -fPIE,$(common-cflags)) -fpic
lib@{lib.id}.so-ldflags    = $(filter-out -fpie -fPIE,$(common-ldflags))
lib@{lib.id}.so-ldflags   += -shared -Bsymbolic -fpic
lib@{lib.id}.so-ldflags   += -Wl,-soname,lib@{lib.id}.so
lib@{lib.id}.so-pkgconfig  =@{pkgconfig}

@@end if
@@if @static
arlibs := lib@{lib.id}.a
lib@{lib.id}.a-objs      = static/@{lib.name}.o
lib@{lib.id}.a-cflags    = $(common-cflags)
lib@{lib.id}.a-pkgconfig =@{pkgconfig}

@@end if
HEADERDIR := $(CURDIR)/include
headers    = $(PACKAGE)/@{lib.name}.h

define @{lib.id}_pkgconf_tmpl
prefix=$(PREFIX)
exec_prefix=$${prefix}
libdir=$${exec_prefix}/lib
includedir=$${prefix}/include

Name: lib@{lib.id}
Description: @{lib.doc}
Version: $(VERSION)
Requires.private: @{pkgconfig}
Requires:
Cflags: -I$${includedir}
#if @shared
Libs: -L$${libdir} -Wl,--push-state,--as-needed -l@{lib.id} -Wl,--pop-state
#end if
endef

pkgconfigs := lib@{lib.id}.pc
lib@{lib.id}.pc-tmpl := @{lib.id}_pkgconf_tmp

################################################################################
# Source code tags generation
################################################################################

tagfiles := $(shell find $(CURDIR) $(HEADERDIR) -type f)

################################################################################
# Documentation generation
################################################################################

doxyconf  := $(CURDIR)/sphinx/Doxyfile
doxyenv   := SRCDIR="$(HEADERDIR) $(CURDIR)"

sphinxsrc := $(CURDIR)/sphinx
sphinxenv := \
	VERSION="$(VERSION)" \
	PROJECT="@{lib.name}" \
	$(if $(strip $(EBUILDDOC_TARGET_PATH)), \
	     EBUILDDOC_TARGET_PATH="$(strip $(EBUILDDOC_TARGET_PATH))") \
	$(if $(strip $(EBUILDDOC_INVENTORY_PATH)), \
	     EBUILDDOC_INVENTORY_PATH="$(strip $(EBUILDDOC_INVENTORY_PATH))") \
	$(if $(strip $(DPACKDOC_TARGET_PATH)), \
	     DPACKDOC_TARGET_PATH="$(strip $(DPACKDOC_TARGET_PATH))") \
	$(if $(strip $(DPACKDOC_INVENTORY_PATH)), \
	     DPACKDOC_INVENTORY_PATH="$(strip $(DPACKDOC_INVENTORY_PATH))") \
	$(if $(strip $(STROLLDOC_TARGET_PATH)), \
	     STROLLDOC_TARGET_PATH="$(strip $(STROLLDOC_TARGET_PATH))") \
	$(if $(strip $(STROLLDOC_INVENTORY_PATH)), \
	     STROLLDOC_INVENTORY_PATH="$(strip $(STROLLDOC_INVENTORY_PATH))")

################################################################################
# Source distribution generation
################################################################################

override distfiles = include/$(PACKAGE)/@{lib.name}.h \
                     sphinx/license/gpl.rst \
                     sphinx/license/lgpl.rst \
                     sphinx/api.rst \
                     sphinx/conf.py \
                     sphinx/Doxyfile \
                     sphinx/genindex.rst \
                     sphinx/index.rst \
                     sphinx/install.rst \
                     sphinx/license.rst \
                     Config.in \
                     COPYING \
                     COPYING.LESSER \
                     ebuild.mk \
                     Makefile \
                     README.rst \
                     @{lib.name}.c

# Override InterSphinx eBuild base documentation URI and make it point to online
# GitHub pages when building final source distribution tarball
dist: export EBUILDDOC_TARGET_PATH := http://grgbr.github.io/ebuild/
dist: export STROLLDOC_TARGET_PATH := http://grgbr.github.io/stroll/
dist: export DPACKDOC_TARGET_PATH  := http://grgbr.github.io/dpack/

@@end if
# ex: filetype=make
