int __nonull(1) __warn_result ${deprecated}
${check}(${type} * value)
{
	${assert_fn}(value);

#for $e in $entries
#if 'repeated' in $e
	if (value->${e.id}_nb > ${e.repeated})
		return 1;

	for (unsigned int i = 0; i < ${e.repeated}; i++) {
		if (${e.check}(${e.vref}value->${e.id}[i]))
			return 1;
	}
#else
	if (${e.check}(${e.vref}value->${e.id}))
		return 1;
#end if

#end for
	return 0;
}

#for $e in $entries
#if 'repeated' in $e
static int __nonull(1, 3)
${decode}_array_${e.id}(struct dpack_decoder * decoder,
			unsigned int id,
			void * __restrict ctx)
{
	${assert_fn}(decoder);
	${assert_fn}(ctx);
	${assert_fn}(id < ${e.repeated});

	${type} *value = ctx;

	value->${e.id}_nb = id;
	return ${e.decode}(decoder, &value->${e.id}[id]);
}

#end if
#end for
int
${decode}(struct dpack_decoder * decoder,
	  ${type} * __restrict value)
{
	${assert_fn}(decoder);
	${assert_fn}(value);

	int ret;

#for $e in $entries
#if 'repeated' in $e
	${assert_fn}(value->${e.id}_nb == 0);
	${assert_fn}(value->${e.id});

	ret = dpack_array_decode_max(decoder, ${e.repeated},
				     ${decode}_array_${e.id},
				     value);
	if (ret)
		return ret;
#else
	ret = ${e.decode}(decoder, &value->${e.id});
	if (ret)
		return ret;
#end if

#end for
	return 0;
}

int
${encode}(struct dpack_encoder * encoder,
	  ${type} * value)
{
	${assert_fn}(encoder);
	${assert_fn}(${check}(value) == 0);

	int ret;

#for $e in $entries
#if 'repeated' in $e
	${assert_fn}(value->${e.id});

	if (value->${e.id}_nb) {
		ret = dpack_array_begin_encode(encoder, value->${e.id}_nb);
		if (ret)
			return ret;

		for (unsigned int i = 0; i < value->${e.id}_nb; i++) {
			ret = ${e.encode}(encoder, ${e.vref}value->${e.id}[i]);
			if (ret)
				return ret;
		}

		dpack_array_end_encode(encoder);
	}
#else
	ret = ${e.encode}(encoder, ${e.vref}value->${e.id});
	if (ret)
		return ret;
#end if

#end for

	return 0;
}
#if $json

#for $e in $entries
#if 'repeated' in $e
static int __nonull(1, 3)
${decode}_array_${e.id}_to_json(struct dpack_decoder * decoder,
				unsigned int id,
				void * __restrict ctx)
{
	${assert_fn}(decoder);
	${assert_fn}(ctx);
	${assert_fn}(id < ${e.repeated});

	struct json_object *obj;
	struct json_object *object = ctx;

	${assert_fn}(json_object_is_type(object, json_type_array));

	obj = ${e.decode}_to_json(decoder);
	if (!obj)
		return -1;

	return json_object_array_put_idx(object, id, obj);
}

#end if
#end for
struct json_object *
${decode}_to_json(struct dpack_decoder * decoder)
{
	${assert_fn}(decoder);

	int ret;
	struct json_object *object;
	struct json_object *obj;

	object = json_object_new_object();
	if (!object)
		return NULL;

#for $e in $entries
#if 'repeated' in $e
	obj = json_object_new_array();
	if (!obj)
		goto error;

	ret = dpack_array_decode_max(decoder, ${e.repeated},
				     ${decode}_array_${e.id}_to_json,
				     obj);
	if (ret)
		goto error;
#else
	obj = ${e.decode}_to_json(decoder);
	if (!obj)
		goto error;
#end if

	ret = json_object_object_add(object, "${e.id}", obj);
	if (ret)
		goto error;

#end for
	return object;
error:
	json_object_put(object);
	return NULL;
}

int
${encode}_from_json(struct dpack_encoder * encoder,
		    struct json_object * object)
{
	${assert_fn}(encoder);
	${assert_fn}(object);

	int ret;
	struct json_object *obj;
	unsigned int nb __unused;

#for $e in $entries
	obj = json_object_object_get(object, "${e.id}");
	if (!obj)
		return -EINVAL;

#if 'repeated' in $e
	if (!json_object_is_type(obj, json_type_array))
		return -EINVAL;

	nb = (unsigned int)json_object_array_length(obj);
	if (nb > ${e.repeated})
		return -EINVAL;
	
	if (nb) {
		ret = dpack_array_begin_encode(encoder, nb);
		if (ret)
			return ret;

		for (unsigned int i = 0; i < nb; i++) {
			struct json_object *tmp;

			tmp = json_object_array_get_idx(obj, i);
			if (!tmp)
				return -EINVAL;

			ret = ${e.encode}_from_json(encoder, tmp);
			if (ret)
				return ret;
		}

		dpack_array_end_encode(encoder);
	}
#else
	ret = ${e.encode}_from_json(encoder, obj);
	if (ret)
		return ret;
#end if

#end for
	return 0;
}

#end if
int
${init}(${type} * value __unused)
{
	int ret = 0;

#for $e in $entries
#if 'repeated' in $e
	value->${e.id}_nb = 0;
	value->${e.id} = malloc(sizeof(*value->${e.id}) * ${e.repeated});
	if (!value->${e.id})
		return -ENOMEM;

#if $e.init
	for (unsigned int i = 0; i < ${e.repeated}; i++) {
		ret = ${e.init}(&value->${e.id}[i]);
		if (ret)
			return ret;
	}

#end if
#else
#if $e.init
	ret = ${e.init}(&value->${e.id});
	if (ret)
		return ret;

#end if
#end if
#end for
	return ret;
}

void
${fini}(${type} * value __unused)
{
#for $e in $entries
#if 'repeated' in $e
#if $e.fini
	for (unsigned int i = 0; i < ${e.repeated}; i++)
		${e.fini}(&value->${e.id}[i]);
#end if
	free(value->${e.id});
	value->${e.id} = NULL;
	value->${e.id}_nb = 0;
#else
#if $e.fini
	${e.fini}(&value->${e.id});
#end if
#end if
#end for
}

## ex: filetype=c
