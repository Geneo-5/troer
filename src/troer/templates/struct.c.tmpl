int
${check}(${type} * value)
{
	${assert_fn}(value);

#for $e in $entries
#if 'repeated' in $e
	if (value->${e.id}_nb > ${e.repeated})
		return 1;

	for (unsigned int i = 0; i < ${e.repeated}; i++) {
		if (${e.check}(value->${e.id}[i]))
			return 1;
	}
#else
	if (${e.check}(value->${e.id}))
		return 1;
#end if

#end for
	return 0;
}

#for $e in $entries
#if 'repeated' in $e
static int __dpack_nonull(1, 3)
${decode}_array_${e.id}(struct dpack_decoder * decoder,
			unsigned int id,
			void * __restrict ctx)
{
	${assert_fn}(decoder);
	${assert_fn}(ctx);
	${assert_fn}(id < ${e.repeated});

	${type} *value = ctx;

	value->${e.id}_nb = id;
	return ${e.decode}(decoder, &value->${e.id}[id]);
}

#end if
#end for
int
${decode}(struct dpack_decoder * decoder,
	  ${type} * __restrict value)
{
	${assert_fn}(decoder);
	${assert_fn}(value);

	int ret;

#for $e in $entries
#if 'repeated' in $e
	${assert_fn}(value->${e.id}_nb == 0);
	${assert_fn}(value->${e.id});

	ret = dpack_array_decode_max(decoder, ${e.repeated},
				     ${decode}_array_${e.id},
				     value);
	if (ret)
		return ret;
#else
	ret = ${e.decode}(decoder, &value->${e.id});
	if (ret)
		return ret;
#end if

#end for
	return 0;
}

int
${encode}(struct dpack_encoder * encoder,
	  ${type} * value)
{
	${assert_fn}(encoder);
	${assert_fn}(${check}(value) == 0);

	int ret;

#for $e in $entries
#if 'repeated' in $e
	${assert_fn}(value->${e.id});

	if (value->${e.id}_nb) {
		ret = dpack_array_begin_encode(encoder, value->${e.id}_nb);
		if (ret)
			return ret;

		for (unsigned int i = 0; i < value->${e.id}_nb; i++) {
			ret = ${e.encode}(encoder, value->${e.id}[i]);
			if (ret)
				return ret;
		}

		dpack_array_end_encode(encoder);
	}
#else
	ret = ${e.encode}(encoder, value->${e.id});
	if (ret)
		return ret;
#end if

#end for

	return 0;
}

int
${init}(${type} * value __unused)
{
	int ret = 0;

#for $e in $entries
#if 'repeated' in $e
	value->${e.id}_nb = 0;
	value->${e.id} = malloc(sizeof(*value->${e.id}) * ${e.repeated});
	if (!value->${e.id})
		return -ENOMEM;

#if $e.init
	for (unsigned int i = 0; i < ${e.repeated}; i++) {
		ret = ${e.init}(&value->${e.id}[i]);
		if (ret)
			return ret;
	}

#end if
#else
#if $e.init
	ret = ${e.init}(&value->${e.id});
	if (ret)
		return ret;

#end if
#end if
#end for
	return ret;
}

void
${fini}(${type} * value __unused)
{
#for $e in $entries
#if 'repeated' in $e
#if $e.fini
	for (unsigned int i = 0; i < ${e.repeated}; i++)
		${e.fini}(value->${e.id}[i]);
#end if
	free(value->${e.id});
	value->${e.id} = NULL;
	value->${e.id}_nb = 0;
#else
#if $e.fini
	${e.fini}(value->${e.id});
#end if
#end if
#end for
}

## ex: filetype=c
