$id: https://github.com/Geneo-5/troer/src/troer/schemas/troer.yaml
$schema: https://json-schema.org/draft/2020-12/schema

$defs:
  uint:
    type: number
    minimum: 0
  name:
    type: string
    pattern: ^[a-zA-Z]([a-zA-Z0-9_-]*[a-zA-Z0-9]+)?$
  prefix:
    type: string
    pattern: ^[a-zA-Z]([a-zA-Z0-9_]+)?$
  version:
    type: string
    pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
  types:
    if:
      properties:
        type:
          enum: [ bool, u8, u16, u32, u64, s8, s16, s32, s64, f32, f64, str, enum ]
    then:
      allOf:
        - if:
            properties:
              type:
                enum: [ u8, u16, u32, u64, s8, s16, s32, s64 ]
          then:
            properties:
              min:
                type: integer
              max:
                type: integer
        - if:
            properties:
              type:
                enum: [ f32, f64 ]
          then:
            properties:
              min:
                type: number
              max:
                type: number
        - if:
            properties:
              type:
                const: str
          then:
            required: [ size ]
            properties:
              size:
                type: integer
              pattern:
                type: string
                pattern: ^[^\^].*[^\$]$
        - if:
            properties:
              type:
                const: enum
          then:
            required: [ entries ]
            properties:
              entries:
                type: array
                minItems: 1
                items:
                  oneOf:
                    - $ref: '#/$defs/name'
                    - type: object
                      required: [ name ]
                      additionalProperties: False
                      properties:
                        name:
                          $ref: '#/$defs/name'
                        value:
                          type: [ string, number ]
                        doc:
                          type: string

titre: storage
description: Storage schema
type: object
required: [ name, version, doc, schema ]
additionalProperties: false
properties:
  name:
    description: idl name (used like prefix)
    $ref: '#/$defs/name'
  prefix:
    description: use specific prefix instead of name
    $ref: '#/$defs/prefix'
  version:
    description: idl version
    $ref: '#/$defs/version'
  doc:
    description: idl documentation
    type: string
  schema:
    description: Schema compatibility level.
    enum: [ lib, storage, exchange ]

  # headers:
  #   description: List of additional header must be include by lib
  #   type: array
  #   minItems: 1
  #   uniqueItems: true
  #   items:
  #     type: string
  #     pattern: "^((<.+>)|([^<].+[^>]))$"

  includes:
    description: List of include troer files
    type: array
    minItems: 1
    items:
      type: object
      additionalProperties: false
      required: [ file ]
      properties:
        file:
          description: yaml troer file
          type: string
        header:
          description: Set include header file
          type: string
          pattern: "^((<.+>)|([^<].+[^>]))$"
        version:
          description: Version checker
          type: string
          pattern: ^[<>]?(=)?[0-9]+(\.[0-9]+(\.[0-9]+)?)?$

  definitions:
    description: |
      List of type and constant definitions (enums, flags, const and extern ref).
    type: array
    minItems: 1
    items:
      type: object
      required: [ name, type ]
      unevaluatedProperties: false
      properties:
        name:
          $ref: '#/$defs/name'
        type:
          enum: [ const, enum, flags, ref ]
        doc:
          type: string
      allOf:
        -
          if:
            properties:
              type:
                const: const
          then:
            properties:
              value:
                type: [ string, number ]
            required: [ value ]
        -
          if:
            properties:
              type:
                enum: [ enum, flags ]
          then:
            required: [ entries ]
            properties:
              entries:
                type: array
                items:
                  oneOf:
                    - $ref: '#/$defs/name'
                    - type: object
                      required: [ name ]
                      additionalProperties: False
                      properties:
                        name:
                          $ref: '#/$defs/name'
                        value:
                          type: [ string, number ]
                        doc:
                          type: string
        -
          if:
            properties:
              type:
                const: ref
          then:
            required: [ header, pack, unpack, type ]
            properties:
              header:
                description: header which already defines this value.
                type: string
                pattern: "^((<.+>)|([^<].+[^>]))$"
              pack:
                type: string
              unpack:
                type: string
              obj:
                type: string
              init:
                type: string
              fini:
                type: string
              check:
                type: string

  structures:
    description: |
      List of type
    type: array
    minItems: 1
    items:
      type: object
      required: [ name, type ]
      unevaluatedProperties: false
      properties:
        name:
          $ref: '#/$defs/name'
        doc:
          type: string
        deprecated:
          type: boolean
      allOf:
        - $ref: '#/$defs/types'
        - if:
            properties:
              type:
                const: struct
          then:
            required: [ entries ]
            properties:
              entries:
                type: array
                minItems: 1
                items:
                  type: object
                  required: [ name, type ]
                  unevaluatedProperties: false
                  properties:
                    name:
                      $ref: '#/$defs/name'
                    doc:
                      type: string
                    deprecated:
                      type: boolean
                    repeated:
                      type: integer
                      minimum: 2
                      maximum: 1024
                  allOf:
                    - $ref: '#/$defs/types'
                    - if:
                        properties:
                          type:
                            const: ref
                      then:
                        required: [ ref ]
                        properties:
                          ref:
                            $ref: '#/$defs/name'

